package tmpl

templ Index() {
	<!DOCTYPE html>
	<html lang="en-US">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width"/>
			<title>Dev</title>
			<script src="https://cdn.tailwindcss.com"></script>
			<script src="https://unpkg.com/htmx.org@1.9.9"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
			<link rel="stylesheet" href="https://cdn.jsdelivr.net/simplemde/1.11/simplemde.min.css"/>
			<script src="https://cdn.jsdelivr.net/simplemde/1.11/simplemde.min.js"></script>
			<script src="https://cdn.jsdelivr.net/npm/chart.js@3.5.1/dist/chart.min.js"></script>
			<script defer src="https://unpkg.com/@alpinejs/ui@3.13.3-beta.1/dist/cdn.min.js"></script>
			<script defer src="https://unpkg.com/@alpinejs/focus@3.13.3/dist/cdn.min.js"></script>
			<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css"/>
			<script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
		</head>
		<style>
  #body {
    background: #1B1B1B;
  }

  #chat {
    text-align: left;
    background: #343434;
    width: 500px;
    min-height: 300px;
    padding: 20px;
  }
</style>
		<body id="body">
			@Tabs()
		</body>
	</html>
}

templ SimpleChat() {
	<center>
		<h3 class="text-white">Chat</h3>
		<pre id="chat"></pre>
		<input placeholder="say something" id="text" type="text"/>
		@ChatScript()
	</center>
}

templ ChatScript() {
	<script>

  let user = {
    name: "",
  }
  let messages = [];
  const url = "ws://" + window.location.host + "/ws";
  const ws = new WebSocket(url);
  const name = "Guest" + Math.floor(Math.random() * 1000);
  const fragment = new DocumentFragment();

  let msg = {
    user: "",
    msg: "",
  }
  ws.addEventListener("open", (event) => {

    // ws.send("Hello Server!");
  });
  ws.addEventListener("message", (event) => {
    data = JSON.parse(event.data);
    console.log("Message from server ", data.msg);
    messageHandler(event);
  });

  ws.addEventListener("close", (event) => {
    ws.close();
  })

  let chat = document.getElementById("chat");
  let text = document.getElementById("text");

  text.addEventListener("keydown", function (e) {
    if (e.key === "Enter" && text.value !== "") {
      tmp = msg;
      tmp.user = name;
      tmp.msg = text.value;
      ws.send(JSON.stringify(tmp));
      text.value = "";
    }
  })
  function now() {
    let iso = new Date().toISOString();
    return iso.split("T")[1].split(".")[0];
  }
  function messageHandler(event) {
    msg = JSON.parse(event.data);
    let line = now() + ": " + msg.msg + "\n";
    const span = document.createElement("span");
    span.innerText = line;
    span.setAttribute("class", "text-white font-italic rounded-sm bg-gray-700 px-2 py-1 my-2 block");
    fragment.appendChild(span);

    chat.appendChild(fragment);
  }

</script>
}

templ MDeditor() {
	<div class="flex flex-col items-center justify-center"></div>
	<div id="MyID" class="prose w-full"></div>
}

templ MDeditorscript() {
	<script>
  let editor = new SimpleMDE({
    element: document.getElementById("MyID"),
  });

  editor.value(this.value);

  editor.codemirror.on('change', () => {
    this.value = editor.value()
  });
</script>
}

templ Chart() {
	<div
 		x-data="{
        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
        values: [200, 100, 250, 225, 125],
        init() {
            let chart = new Chart(this.$refs.canvas.getContext('2d'), {
                type: 'line',
                data: {
                    labels: this.labels,
                    datasets: [{
                        data: this.values,
                        backgroundColor: '#77C1D2',
                        borderColor: '#77C1D2',
                    }],
                },
                options: {
                    interaction: { intersect: false },
                    scales: { y: { beginAtZero: true }},
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            displayColors: false,
                            callbacks: {
                                label(point) {
                                    return 'Sales: $'+point.raw
                                }
                            }
                        }
                    }
                }
            })
 
            this.$watch('values', () => {
                chart.data.labels = this.labels
                chart.data.datasets[0].data = this.values
                chart.update()
            })
        }
    }"
 		class="w-full"
	>
		<canvas x-ref="canvas" class="rounded-lg bg-white p-8"></canvas>
	</div>
}

templ Tabs() {
	<!-- Toggle -->
	<div x-data="{ value: false }" class="flex items-center justify-center" x-id="['toggle-label']">
		<input type="hidden" name="sendNotifications" :value="value"/>
		<!-- Label -->
		<label
 			@click="$refs.toggle.click(); $refs.toggle.focus()"
 			:id="$id('toggle-label')"
 			class="text-gray-900 font-medium"
		>
			Send notifications
		</label>
		<!-- Button -->
		<button
 			x-ref="toggle"
 			@click="value = ! value"
 			type="button"
 			role="switch"
 			:aria-checked="value"
 			:aria-labelledby="$id('toggle-label')"
 			:class="value ? 'bg-slate-400' : 'bg-slate-300'"
 			class="relative ml-4 inline-flex w-14 rounded-full py-1 transition"
		>
			<span
 				:class="value ? 'translate-x-7' : 'translate-x-1'"
 				class="bg-white h-6 w-6 rounded-full transition shadow-md"
 				aria-hidden="true"
			></span>
		</button>
	</div>
	<div x-data x-tabs class="mx-auto max-w-3xl">
		<div x-tabs:list class="-mb-px flex items-stretch">
			<button
 				x-tabs:tab
 				type="button"
 				:class="$tab.isSelected ? 'border-gray-200 bg-white' : 'border-transparent'"
 				class="inline-flex rounded-t-md border-t border-l border-r px-5 py-2.5"
			>Tab 1</button>
			<button
 				x-tabs:tab
 				type="button"
 				:class="$tab.isSelected ? 'border-gray-200 bg-white' : 'border-transparent'"
 				class="inline-flex rounded-t-md border-t border-l border-r px-5 py-2.5"
			>Tab 2</button>
		</div>
		<div x-tabs:panels class="rounded-b-md border border-gray-200 bg-white">
			<section x-tabs:panel class="p-8">
				<h2 class="text-xl font-bold">Tab 1 Content</h2>
				<p class="mt-2 text-gray-500">
					Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio, quo sequi error
					quibusdam quas temporibus animi sapiente eligendi! Deleniti minima velit recusandae iure.
				</p>
				<button class="mt-5 rounded-md border border-gray-200 px-4 py-2 text-sm">Take Action</button>
			</section>
			<section x-tabs:panel class="p-8">
				<h2 class="text-xl font-bold">Tab 2 Content</h2>
				<p class="mt-2 text-gray-500">
					Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
					fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit
					anim id est laborum.
				</p>
				<button class="mt-5 rounded-md border border-gray-200 px-4 py-2 text-sm">Take Action</button>
			</section>
		</div>
	</div>
}
