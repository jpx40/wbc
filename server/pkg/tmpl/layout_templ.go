// Code generated by templ@v0.2.316 DO NOT EDIT.

package tmpl

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Index(c templ.Component) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<!doctype html><html lang=\"en-US\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width\"><title>")
		if err != nil {
			return err
		}
		var_2 := `Dev`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</title><script src=\"https://cdn.tailwindcss.com\">")
		if err != nil {
			return err
		}
		var_3 := ``
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script><script src=\"https://unpkg.com/htmx.org@1.9.9\">")
		if err != nil {
			return err
		}
		var_4 := ``
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script></head><style>")
		if err != nil {
			return err
		}
		var_5 := `
  #body {
    background: #1B1B1B;
  }

  #chat {
    text-align: left;
    background: #343434;
    width: 500px;
    min-height: 300px;
    padding: 20px;
  }
`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</style><body id=\"body\">")
		if err != nil {
			return err
		}
		err = c.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func SimpleChat() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_6 := templ.GetChildren(ctx)
		if var_6 == nil {
			var_6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<center><h3 class=\"text-white\">")
		if err != nil {
			return err
		}
		var_7 := `Chat`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h3><pre id=\"chat\"></pre><input placeholder=\"say something\" id=\"text\" type=\"text\">")
		if err != nil {
			return err
		}
		err = ChatScript().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</center>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func ChatScript() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_8 := templ.GetChildren(ctx)
		if var_8 == nil {
			var_8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<script>")
		if err != nil {
			return err
		}
		var_9 := `

  let user = {
    name: "",
  }
  let messages = [];
  const url = "ws://" + window.location.host + "/ws";
  const ws = new WebSocket(url);
  const name = "Guest" + Math.floor(Math.random() * 1000);
  const fragment = new DocumentFragment();

  let msg = {
    user: "",
    msg: "",
  }
  ws.addEventListener("open", (event) => {

    // ws.send("Hello Server!");
  });
  ws.addEventListener("message", (event) => {
    data = JSON.parse(event.data);
    console.log("Message from server ", data.msg);
    messageHandler(event);
  });

  ws.addEventListener("close", (event) => {
    ws.close();
  })

  let chat = document.getElementById("chat");
  let text = document.getElementById("text");

  text.addEventListener("keydown", function (e) {
    if (e.key === "Enter" && text.value !== "") {
      tmp = msg;
      tmp.user = name;
      tmp.msg = text.value;
      ws.send(JSON.stringify(tmp));
      text.value = "";
    }
  })
  function now() {
    let iso = new Date().toISOString();
    return iso.split("T")[1].split(".")[0];
  }
  function messageHandler(event) {
    msg = JSON.parse(event.data);
    let line = now() + ": " + msg.msg + "\n";
    const span = document.createElement("span");
    span.innerText = line;
    span.setAttribute("class", "text-white font-italic rounded-sm bg-gray-700 px-2 py-1 my-2 block");
    fragment.appendChild(span);

    chat.appendChild(fragment);
  }

`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}
